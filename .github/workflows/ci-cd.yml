name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write        # allow committing to repos (for GitOps push)
  packages: write        # allow pushing to GHCR

concurrency:
  group: gitops-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  # list all the docker file in your repository here and reference the parent/main branch

  SERVICES: backend,transactions,studentportfolio,syncer
  TARGET_BRANCH: main
 # Declaring the jobs that we want our runner to run. We want it to build and push the images to our gitops repo
jobs:
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, transactions, studentportfolio, syncer]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check service has a Dockerfile
        id: check
        run: |
          if [ -f "./${{ matrix.service }}/Dockerfile" ]; then
            echo "build=true" >> "$GITHUB_OUTPUT"
          else
            echo "build=false" >> "$GITHUB_OUTPUT"
            echo "No Dockerfile for ${{ matrix.service }} â€” skipping."
          fi

      - name: Log in to GHCR
        if: steps.check.outputs.build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Set up Docker Buildx
        if: steps.check.outputs.build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build & push ${{ matrix.service }}
        if: steps.check.outputs.build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}-${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}-${{ matrix.service }}:${{ github.sha }}
          provenance: false
          sbom: false

  update-gitops:
    name: Update GitOps manifests
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout app repo (for k8s folder)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update GitOps repository (handles empty repo)
        shell: bash
        env:
          REGISTRY: ${{ env.REGISTRY }}
          OWNER: ${{ github.repository_owner }}
          APP_REPO: ${{ github.event.repository.name }}
          GITOPS_REPO: ${{ secrets.GITOPS_REPO }}   # e.g., "yourname/your-gitops-repo"
          GIT_TOKEN: ${{ secrets.GITOPS_PAT }}      # PAT with repo scope
          TARGET_BRANCH: ${{ env.TARGET_BRANCH }}
        run: |
          set -euo pipefail

          # ---- Git identity & credentials
          git config --global user.name  "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global credential.helper store
          printf "https://%s:x-oauth-basic@github.com\n" "$GIT_TOKEN" > ~/.git-credentials

          # ---- Clone or init GitOps repo
          workdir="$(mktemp -d)"
          echo "Cloning GitOps repo ${GITOPS_REPO} ..."
          if git clone "https://github.com/${GITOPS_REPO}.git" "$workdir/gitops"; then
            cd "$workdir/gitops"
          else
            echo "Repo not found or no access, initializing new repository structure..."
            mkdir -p "$workdir/gitops"
            cd "$workdir/gitops"
            git init
            git remote add origin "https://github.com/${GITOPS_REPO}.git"
          fi

          # ---- Ensure we're on TARGET_BRANCH even if repo is empty
          if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
            git checkout --orphan "${TARGET_BRANCH}"
          else
            if git ls-remote --exit-code --heads origin "${TARGET_BRANCH}" >/dev/null 2>&1; then
              git checkout "${TARGET_BRANCH}"
            else
              git checkout -b "${TARGET_BRANCH}"
            fi
          fi

          # ---- Bring over k8s manifests (first run will seed an empty repo)
          if [ ! -d "${GITHUB_WORKSPACE}/k8s" ]; then
            echo "::warning:: No k8s/ directory found in app repo; nothing to copy."
            mkdir -p k8s
          else
            if command -v rsync >/dev/null 2>&1; then
              rsync -a --delete "${GITHUB_WORKSPACE}/k8s/" "./k8s/"
            else
              rm -rf ./k8s
              mkdir -p ./k8s
              cp -R "${GITHUB_WORKSPACE}/k8s/." "./k8s/"
            fi
          fi
          
                    # Normalize any placeholders to the real owner/repo once
          find k8s -type f -name "*deployment*.yaml" -print0 | xargs -0 sed -i -E \
            "s|image:\s*ghcr\.io/OWNER/REPO-([a-z0-9._-]+):[^[:space:]]+|image: ${REGISTRY}/${OWNER}/${APP_REPO}-\1:latest|g"

          # Strip trailing spaces (and Windows CRs) on image lines
          find k8s -type f -name "*deployment*.yaml" -print0 | xargs -0 sed -i 's/\r$//; s/[[:space:]]\+$//'

          # Bump tags to current SHA
          while IFS= read -r -d '' f; do
            sed -i -E "s|(image:\s*${REGISTRY}/${OWNER}/${APP_REPO}-[a-z0-9._-]+:)[^[:space:]]+|\1${GITHUB_SHA}|g" "$f"
          done < <(find k8s -type f -name "*deployment*.yaml" -print0)

          # ---- Bump image tags in ALL *deployment*.yaml files to the current commit SHA
          # Matches: image: ghcr.io/OWNER/APP_REPO-<service>:<anything>  -> set tag to $GITHUB_SHA
          shopt -s nullglob
          mapfile -d '' files < <(find k8s -type f -name "*deployment*.yaml" -print0)
          if [ "${#files[@]}" -eq 0 ]; then
            echo "::warning:: No deployment YAMLs found under k8s/. Skipping tag bump."
          else
            for f in "${files[@]}"; do
              sed -i -E "s|(image:\s*${REGISTRY}/${OWNER}/${APP_REPO}-[a-z0-9._-]+:)[^[:space:]]+|\\1${GITHUB_SHA}|g" "$f"
            done
          fi

          # ---- Commit (if needed) and push
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "GitOps: update images to ${GITHUB_SHA}"
          fi

          git remote remove origin >/dev/null 2>&1 || true
          git remote add origin "https://${GIT_TOKEN}@github.com/${GITOPS_REPO}.git"
          git push -u origin "${TARGET_BRANCH}"
